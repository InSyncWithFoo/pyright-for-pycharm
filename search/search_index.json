{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyright for PyCharm user documentation","text":"<p>This site serves as the user documentation for the Pyright PyCharm plugin.</p> <p>The plugin runs and reroutes Pyright's diagnostics back to your IDE. Both PyCharm Professional and PyCharm Community users can use it.</p> <p>Migrating from the old Pyright Language Server plugin?</p>"},{"location":"#usage","title":"Usage","text":"<p>No initial configurations are necessary, given that you already have Pyright installed.</p> <p>After installing the plugin, return to your files and start making some modifications. You should see diagnostics from Pyright in a few seconds. If not, refer to Problems and solutions.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#my-code-should-have-nothese-errors-but-it-doesdoesnt","title":"My code should have no/these errors, but it does/doesn't.","text":"<p>This plugin contains no type checking logic. For type checking bugs, please report them to the Pyright issue tracker.</p>"},{"location":"faq/#whats-the-difference-between-the-pyright-and-pyright-python-files","title":"What's the difference between the <code>pyright</code> and <code>pyright-python</code> files?","text":"<p>Pyright is written in TypeScript and officially published on NPM. It requires a dependency on Node, which Python developers might not have on their development machines.</p> <p>The PyPI <code>pyright</code> package was created to solve this problem. When installed, it places 4 proxy executables in the same virtual environment/directory you have your <code>pip</code> in:</p> <ul> <li><code>pyright</code>/<code>pyright-langserver</code> (these have the same names as the originals)</li> <li><code>pyright-python</code>/<code>pyright-python-langserver</code></li> </ul> <p>These proxies will automatically install the actual NPM package if it is not already installed, then re-output the results of the original executables. With the correct configurations, new versions may be automatically installed at runtime.</p> <p>If the corresponding version of the NPM package has not been installed, the proxies will also re-output the \"added 1 package\" notice by NPM, which will cause parsing errors. Due to this, it is recommended that the original executables are used instead.</p> <p>Said original executables can typically be found at:</p> <ul> <li>Windows: <code>%HOMEPATH%/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> <li>Linux: <code>~/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> </ul>"},{"location":"faq/#why-does-the-plugin-have-to-perform-saves-so-often-in-command-line-mode","title":"Why does the plugin have to perform saves so often in command line mode?","text":"<p>Pyright only reads actual files on disk. It does not support passing files from stdin. A feature request was made and quickly rejected.</p> <p>Adding an option that makes the plugin run only on \"manual\" saves (the Save All action) is counter-productive, since that doesn't guarantee the annotator class is called. This is a known limitation.</p> <p>Use one of the two other modes instead.</p>"},{"location":"faq/#is-the-command-line-watch-mode-watch-supported","title":"Is the command-line watch mode (<code>--watch</code>) supported?","text":"<p>No. Use one of the two language server modes instead.</p>"},{"location":"faq/#what-does-this-command-line-option-do","title":"What does this command line option do?","text":"<p>Refer to Pyright's documentation for the meaning of these options.</p>"},{"location":"faq/#is-this-plugin-affiliated-with-microsoftjetbrains","title":"Is this plugin affiliated with Microsoft/JetBrains?","text":"<p>No, or at least not in a business or ownership sense.</p> <p>It was, however, created out of adoration of Pyright and JetBrains IDEs.</p>"},{"location":"faq/#does-this-plugin-support-basedpyright","title":"Does this plugin support Basedpyright?","text":"<p>Only in Command line mode. See this issue for more information.</p>"},{"location":"faq/#i-love-this-project-how-can-i-support-it","title":"I love this project. How can I support it?","text":"<p>You can consider sponsoring it.</p> <p>If you are feeling generous, see <code>CONTRIBUTING.md</code> for how to contribute non-financially.</p>"},{"location":"features/","title":"Other features","text":""},{"location":"features/#suppressing-diagnostics-using-quick-fixes","title":"Suppressing diagnostics using quick fixes","text":"<p>Most diagnostics can be suppressed using their corresponding quick fixes:</p> BeforeAfter <p></p> <p></p> <p>If a comment already presents on that line, the new error code will be appended to the end of the list:</p> BeforeAfter <p></p> <p></p> <p>If the error has no corresponding code, the entire list will be removed:</p> BeforeAfter <p></p> <p></p>"},{"location":"features/#pyrightconfigjson-file-icon","title":"<code>pyrightconfig.json</code> file icon","text":"<p>In file-related views, the default JSON file icon for the <code>pyrightconfig.json</code> file is replaced with Pyright's logo.</p> Project tool window: <p></p> Editor tabs: <p></p> Breadcrumbs: <p></p>"},{"location":"how-to/","title":"How-to guides","text":""},{"location":"how-to/#how-to-install-the-pyright-executables","title":"How to install the Pyright executables","text":"<p>Choose one that works for you:</p> <pre><code>$ pip install pyright\n$ uv tool install pyright\n$ uv pip install pyright\n$ uv add --dev pyright\n$ npm install pyright\n$ yarn add pyright\n$ pnpm install pyright\n$ bun install pyright\n$ brew install pyright\n</code></pre> <p>See also Pyright's official installation guide.</p>"},{"location":"how-to/#how-to-restart-the-language-server","title":"How to restart the language server","text":""},{"location":"how-to/#lsp4ij-mode","title":"LSP4IJ mode","text":"<p>From the LSP Consoles of the Language Servers toolwindow, find the line that says \"Pyright\".</p> <p>Right click the line below it, then click \"Stop\". The line should then say \"Disabled\". Right click that line again, then click \"Restart\".</p> StopRestart <p></p> <p></p>"},{"location":"how-to/#native-lsp-client-mode","title":"Native LSP client mode","text":"<p>In the status bar, find the cell that has either Pyright's icon or a pair of braces. Click it, then click the loop icon.</p> <p></p>"},{"location":"how-to/#how-do-i-find-the-ide-log-files","title":"How do I find the IDE log files?","text":"<p>Open the action panel using Ctrl Shift A or your corresponding shortcut, then choose Show Log in Explorer. For macOS, this action is called Show Log in Finder.</p> <p>This should open a directory containing a file called <code>idea.log</code> and possibly other files that have the <code>idea.&lt;number&gt;.log</code> naming schema. <code>idea.log</code> is the most recent log file; <code>idea.&lt;number&gt;.log</code>s are archived ones.</p> <p>Open <code>idea.log</code> using your favourite text editor/reader. Note that it might be up to 10 MB in size.</p> <p>Alternatively, navigate to the directories documented here.</p>"},{"location":"how-to/#how-to-enable-language-server-logging","title":"How to enable language server logging","text":"<p>Add the following line to the Debug Log Settings panel (Help | Diagnostic Tools):</p> <pre><code>com.intellij.platform.lsp\n</code></pre>"},{"location":"migration-guide/","title":"How to migrate from Pyright Language Server","text":"<p>Provided that you never modify the settings files manually, follow these three steps, in this exact order:</p> <ul> <li>Uninstall Pyright Language Server</li> <li>Install Pyright</li> <li>Restart IDE (important)</li> </ul> <p>Existing settings will be migrated automatically. Restarting the IDE is necessary for this to work correctly.</p>"},{"location":"migration-guide/#what-if-i-modified-the-settings-file","title":"What if I modified the settings file?","text":"<p>Look for the <code>pyright-langserver.xml</code> under the <code>.idea</code> subdirectory of your project. All old settings are stored in that file.</p> <p>The same applies for version 0.6.0 of the Pyright plugin: its settings are stored in <code>pyright.xml</code> along with 0.7.0's settings.</p>"},{"location":"problems/","title":"Problems and solutions","text":""},{"location":"problems/#no-annotations","title":"No annotations","text":"<p>Make sure that:</p> <ul> <li>Your project has the correct interpreter set   (Project | Python Interpreter).</li> <li>The executable is given and is correct.</li> <li>The plugin itself is enabled (Plugins).</li> <li>The inspection entry is enabled.</li> </ul> <p>Other things to try:</p> <ul> <li>Reinstall the plugin or update to the latest version.</li> <li>Reopen the files, reopen the project or restart the IDE.</li> <li>Restart the language server.</li> <li>Restart your machine.</li> <li>Reinstall/reset the IDE.</li> </ul> <p>If the problem persists, please report it to the plugin's issue tracker.</p>"},{"location":"problems/#fatal-error","title":"Fatal error","text":"<p>This most likely suggests a Pyright bug.</p> <p>Disable the plugin immediately to avoid hardware problems. Try to narrow the problem as much as possible, then report it to Pyright's issue tracker.</p>"},{"location":"problems/#cannot-parse-configuration-file","title":"Cannot parse configuration file","text":"<p>This most likely means that the configuration file is invalid in some way.</p> <p>Use the \"Open file\" action to directly open the file which is reported to be invalid.</p>"},{"location":"problems/#unrecognized-command-line-options","title":"Unrecognized command-line options","text":"<p>This most likely means that the executable you provide doesn't support the options used by the plugin.</p> <p>If you are using the official NPM package or the community-maintained PyPI package, please report the problem to the plugin's issue tracker along with the version of Pyright you are using, which can be retrieved by running <code>&lt;path-to-pyright&gt; --version</code> in your terminal.</p>"},{"location":"problems/#cannot-parse-output","title":"Cannot parse output","text":"<p>This most likely mean that there is an error while running the executable, which causes the output to be invalid as JSON and thus cannot be parsed. It could also mean that the output is valid JSON, but does not follow the officially documented schemas.</p> <p>Update Pyright to the latest version may help. For custom executables, maintain compatibility with said version.</p>"},{"location":"problems/#other-inspections-are-taking-too-long","title":"Other inspections are taking too long","text":"<p>Since the command line mode invokes a command-line tool, it must be registered as an <code>ExternalAnnotator</code>. Inspectors of this kind will only run when all other background tasks have finished.</p> <p>Check your other plugins to see if this is the case.</p>"},{"location":"problems/#there-are-a-lot-of-filesthings-to-process","title":"There are a lot of files/things to process","text":"<p>Unlike Mypy, Pyright does not cache previous results. As such, everytime it runs on a given file, it also has to reprocess all other files that file depends on.</p> <p>For better performance, use LSP4IJ mode instead.</p>"},{"location":"problems/#your-code-triggers-a-pyright-bug","title":"Your code triggers a Pyright bug","text":"<p>In some rare cases, Pyright might be stuck in an infinite loop or similar.</p> <p>If this seems to be the case, treat it as a fatal error.</p>"},{"location":"configurations/","title":"Overview","text":"<p>The plugin provides two configuration panels, one IDE-level and one project-level. They can be found under the Tools section of the Settings panel.</p> <p>Project-level configurations only override the IDE-level counterparts when the corresponding \"Override\" checkboxes are selected.</p> <p>Project-level settings are stored in the <code>pyright.xml</code> file under the <code>.idea</code> directory and can be shared with other people  (for example, via version-control systems) to serve as the default settings for the project.</p> <p>Override settings are stored in the <code>pyright-overrides.xml</code> file in the same directory. This file should not be committed, as its purpose is to allow overriding project defaults.</p> <p>Note</p> <p>To configure highlight severity levels, use the inspection entry's corresponding pane.</p>"},{"location":"configurations/#minimum-requirements","title":"Minimum requirements","text":"<p>For the plugin to work, at least one executable needs to be specified. Note that different running modes require different executables.</p>"},{"location":"configurations/executables/","title":"Executable and language server executable","text":"<p>The plugin will automatically search for executables to use (in PATH and the parent directory of the current project's interpreter). However, they can also be manually configured if so desired.</p> <p>The <code>pyright</code> (or <code>pyright-python</code>) and <code>pyright-langserver</code> (or <code>pyright-python-langserver</code>) files can be found in the following locations:</p> <p>What are these executables used for?</p> <p>How do I install the executables?</p> <p>What's the difference between these files?</p> <p>Note</p> <p>The locations mentioned here are for Pip and NPM-like managers. For other tools (e.g. Homebrew), see their documentation to know where they store their executable files.</p> Manager Type OS Directory NPM Global Windows <code>%APPDATA%\\npm</code> NPM Global Linux <code>/usr/local/bin</code> Pip Global Windows <code>%LOCALAPPDATA%\\Programs\\Python\\&lt;version&gt;\\Scripts</code> Pip Global Linux <code>~/.local/bin</code> NPM Local Windows <code>.\\node_modules\\.bin</code> NPM Local Linux <code>./node_modules/.bin</code> Pip Local Windows <code>.\\&lt;your-venv&gt;\\Scripts</code> Pip Local Linux <code>./&lt;your-venv&gt;/bin</code> <p>If the executables can't be found in the aforementioned locations, see the following pages for more information:</p> <ul> <li>Where does npm install packages? - Stack Overflow</li> <li>Where does pip install its packages? - Stack Overflow</li> <li>folders - npm Docs</li> </ul> <p>The executables are used as-is with no additional checks. This is useful if you want to use a Pyright fork or a custom script.</p> <p>Tip</p> <p>For the best experience, always use or maintain compatibility with the latest version of Pyright.</p>"},{"location":"configurations/executables/#resolving-strategy","title":"Resolving strategy","text":"<p>If a relative path is specified, it would be interpreted as relative to the project directory.</p> <p>The plugin also supports a \"smart\" resolving strategy via the \"Resolve against interpreter directory, ignoring extension\" setting.</p> <p>How to always use the Pyright executables from virtual environments?</p> <p>Set \"Executable\" to <code>pyright</code> and \"Language server executable\" to <code>pyright-langserver</code>, then enable the two checkboxes.</p>"},{"location":"configurations/executables/#configuration-file","title":"Configuration file","text":"Used by running mode(s) Default Corresponding CLI option Command line Project's root directory <code>--project</code> <p>Despite being called \"file\", this can be a path to a directory containing a <code>pyrightconfig.json</code> and/or a <code>pyproject.toml</code> (the former takes precedence if both are present).</p> <ul> <li>If a local executable is specified, the local path is used.</li> <li>If only the global executable is specified, the local path is used.</li> <li>If no local configuration file is specified, the global is used.</li> </ul> <p>If the path retrieved using the aforementioned strategy is not specified, the project's root directory is used.</p> <p>Note</p> <p>This configuration is deliberately unsupported in LSP modes. The language server will search for the configuration file(s) inside the root directory of the workspace.</p>"},{"location":"configurations/inspection/","title":"Inspection","text":""},{"location":"configurations/inspection/#inspection-entry","title":"Inspection entry","text":"<p>Technically, the plugin can be disabled by disabling the Pyright diagnostics inspection, which can be found under Editor | Inspections. However, this is not recommended for any purposes other than debugging.</p>"},{"location":"configurations/inspection/#highlight-severity-levels","title":"Highlight severity levels","text":"<p>Pyright diagnostics have three possible levels: Error, warning, and information. These can be mapped to different highlight severity levels in the IDE.</p> <p>The target levels can be configured via the inspection's corresponding settings pane.</p> <p>Only the levels defined in the dropdowns under the Options pane are honored.</p> <p></p> <p>These levels are semantical, not visual.</p> <p>The Information level is the only one not considered \"problematic\" by the IDE. Annotations of this kind will not be reported as \"problems\" during batch inspections (File, Project Errors and similar tabs in the Problems tool window).</p> <p>Note</p> <p>Despite having no visible effects, Information annotations are still shown on hover.</p> InformationWeak warning <p></p> <p></p>"},{"location":"configurations/inspection/#recommended-levels","title":"Recommended levels","text":"Diagnostic For most users (default) For lax users Error Error Warning Warning Warning Weak warning Information Weak warning Weak warning"},{"location":"configurations/others/","title":"Other settings","text":""},{"location":"configurations/others/#auto-restart-server","title":"Auto-restart server","text":"<p>Whether the language server should be automatically restarted on configuration change.</p> <p>Highlight severity level settings will not trigger this behaviour.</p> <p>Default: <code>true</code></p> <p>Note</p> <p>The server might be restarted more than once if both configuration panels are modified.</p>"},{"location":"configurations/others/#diagnostics","title":"Diagnostics","text":"<p>Whether diagnostics should be shown.</p> <p>Default: <code>true</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#use-editor-font-for-tooltips","title":"Use editor font for tooltips","text":"<p>Whether diagnostic tooltips should be displayed in the editor's font.</p> <p>Monospaced messages might be more readable for lengthy error messages with many embedded code parts.</p> <p>Default: <code>false</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#prefix-tooltip-messages","title":"Prefix tooltip messages","text":"<p>Whether messages in tooltips (and only in tooltips) should be prefixed with \"Pyright:\".</p> <p>Default: <code>false</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#link-error-codes-in-tooltips","title":"Link error codes in tooltips","text":"<p>Whether error codes in tooltip messages should be displayed as hyperlinks to Pyright's documentation.</p> <p>Default: <code>false</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#tagged-hints","title":"Tagged hints","text":"<p>Whether the language server should emit \"Unnecessary\" and \"Deprecated\" hints, which are visualized in the IDE as faded-out and strikethrough text.</p> <p>This corresponds to the <code>pyright.disableTaggedHints</code> setting.</p> <p>Default: <code>true</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#minimum-severity-level","title":"Minimum severity level","text":"<p>Only diagnostics whose severity is equal or higher than this threshold will be emitted.</p> <p>This corresponds to the <code>--level</code> CLI option.</p> <p>Default: Information</p> InformationWarningError <p></p> <p></p> <p></p>"},{"location":"configurations/others/#type-information-on-hover","title":"Type information on hover","text":"<p>Whether the language server should show the type, signature and/or documentation when a symbol is hovered.</p> <p>Default: <code>true</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#autocompletion","title":"Autocompletion","text":"<p>Whether the language server should suggests potential completion items.</p> <p>Default: <code>true</code></p> EnabledDisabled <p></p> <p></p> <p>Note</p> <p>The autocompletion result might be modified by the plugin depending on other configurations listed below.</p>"},{"location":"configurations/others/#auto-import-completions","title":"Auto-import completions","text":"<p>Whether the language server should offer completions which, if accepted, will also add a <code>import</code> statement for that newly introduced symbol.</p> <p>This corresponds to the <code>python.analysis.autoImportCompletions</code> setting.</p> <p>Default: <code>true</code></p> Auto-import completions enabledAuto-import completions disabledCompletion support disabled <p></p> <p></p> <p></p>"},{"location":"configurations/others/#monkeypatch-auto-import-details","title":"Monkeypatch auto-import details","text":"<p>Whether an auto-import completion item's detail (\"Auto-import\" or a similar localized message) should be overridden by its import source (module, package, etc.).</p> <p>Default: <code>true</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/others/#autocomplete-parentheses","title":"Autocomplete parentheses","text":"<p>Check this option to also automatically insert parentheses for function, method and constructor completions.</p> <p>Default: <code>true</code></p> BeforeDisabledEnabled <p></p> <p></p> <p></p>"},{"location":"configurations/others/#monkeypatch-trailing-quote-bug","title":"Monkeypatch trailing quote bug","text":"<p>Uncheck this option to use the IDE's native implementation when applying quoted completions, which may insert extraneous trailing quotes.</p> <p>Upstream issue: IJPL-155741.</p> <p>Default: <code>true</code></p> BeforeEnabledDisabled <p></p> <p></p> <p></p>"},{"location":"configurations/others/#add-common-search-paths","title":"Add common search paths","text":"<p>Whether the language server should add common search paths like <code>src</code> when there are no execution environments defined in the configuration file.</p> <p>This corresponds to the <code>python.analysis.autoSearchPaths</code> setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/others/#targeted-file-extensions","title":"Targeted file extensions","text":"<p>A file whose extension is included in this list will be recognized as suitable for the language server to run on. This is useful if you use a server whose support range is wider than that of Pyright.</p> <p>Each extension should be written on one line when the editor is expanded. Otherwise, use the pipe character (<code>|</code>) to separate them.</p> <p>Leading and trailing whitespace are stripped away. Blank extensions are thus considered invalid.</p> <p>Default: <code>py</code>, <code>pyi</code>, <code>pyw</code></p> <p>Note</p> <p>Presumably, due to a limitation/bug of IntelliJ, characters like \"\ud83d\udd25\" (U+1F525 Fire, the extension for Mojo) cannot be serialized correctly into setting files and therefore will not persist between IDE sessions.</p> <p>Testing shows that this affects characters whose codepoints are greater than U+FFFD.</p>"},{"location":"configurations/others/#workspace-folders","title":"Workspace folders","text":"<p>The folders defined by this option will be passed to the language server as \"workspace folders\". Pyright will only recognize <code>pyproject.toml</code>/<code>pyrightconfig.json</code> files which are direct children of these folders.</p> <p>Possible choices:</p> <ul> <li>Project base directories:   Top-level directories which contain files related to the project,   often only one (project root).</li> <li>Source roots:   Directories marked as \"source roots\".</li> </ul> <p>Default: Project base directories</p>"},{"location":"configurations/others/#diagnostic-mode","title":"Diagnostic mode","text":"<p>Note</p> <p>This option's usefulness is as of yet unknown.</p> <p>Modify this option to control the number of files for which the language server will analyze and report diagnostics.</p> <p>This corresponds to the <code>python.analysis.diagnosticMode</code> setting.</p> <p>Default: Open files only</p>"},{"location":"configurations/others/#log-level","title":"Log level","text":"<p>Note</p> <p>Language server logs are not recorded in <code>idea.log</code> by default. You need to manually enable it.</p> <p>Modify this option to make the language server emit more or less [log messages][7].</p> <p>This corresponds to the <code>python.analysis.logLevel</code> setting.</p> <p>Default: Information</p>"},{"location":"configurations/others/#locale","title":"Locale","text":"Default Corresponding environment variable Default <code>LC_ALL</code> <p>The language Pyright should emit messages in.</p> <p>This corresponds to the <code>LC_ALL</code> environment variable.</p> <p>Default: Default (unspecified)</p>"},{"location":"configurations/others/#number-of-threads","title":"Number of threads","text":"<p>The number of threads to paralellize type checking on. A value of 0 means nothing is passed to the executable.</p> <p>This corresponds to the <code>--threads</code> CLI option.</p> <p>Default: 0</p> <p>Warning</p> <p>The <code>--thread</code> option is only available in Pyright 1.1.371 and later. Modifying it will cause an error for older versions.</p>"},{"location":"configurations/running-modes/","title":"Running modes","text":"<p>Each distribution of Pyright comes with two executables: <code>pyright</code> (also referred to as \"executable\") and <code>pyright-langserver</code> (\"language server executable\").</p> <p>Aside from the main functionality discussed here, the first also provides a few more features and options, some of which are supported or used by this plugin.</p> <p>Different running modes use different executables.</p>"},{"location":"configurations/running-modes/#comparison-tables","title":"Comparison tables","text":"<code>pyright</code> <code>pyright-langserver</code> Process type Stops when finishes checking the file(s) Long-running process Result Only type checking diagnostics Diagnostics and other LSP features Performance Good Better in many cases File reading method From disk File contents are sent via stdio Command line mode LSP modes Executable used <code>pyright</code> <code>pyright-langserver</code> Executable invoked After each change On project/supported file open Side effect Will save all files to ensure synchronization No side effects Error reporting Notifications and IDE log LSP4IJ console, notifications and IDE log"},{"location":"configurations/running-modes/#command-line-mode","title":"Command line mode","text":"<p>If this mode is selected, everytime a Python file is edited, this plugin will save it along with other (unsaved) files, then invoke the executable in a subprocess. The result of this process is rerouted back to the IDE in the form of visual annotations.</p> <p>This mode requires two things to work correctly:</p> <ul> <li>That the executable you provide accepts said arguments, and</li> <li>that it outputs diagnostics in the formats defined here.</li> </ul> <p>If any of these requirements are not met, a notification will be displayed.</p> <p>Due to backward compatibility, this is the default mode. However, for better performance, LSP4IJ mode is recommended.</p>"},{"location":"configurations/running-modes/#lsp4ij-and-native-lsp-client-modes","title":"LSP4IJ and Native LSP client modes","text":"<p>If these mode is selected, the language server will be invoked on project open. All LSP messages are then handled by the clients: either the LSP4IJ plugin, or the native client built into the IDE.</p> <p>It is possible to use Pyright with LSP4IJ directly, but doing so is not recommended.</p>"}]}